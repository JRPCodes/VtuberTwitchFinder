//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

//-----ClientClass--SevenTvClient---
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming


export class SevenTvClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param broadcasterId (optional) 
     * @return Success
     */
    emotes(broadcasterId: number | undefined, cancelToken?: CancelToken | undefined): Promise<DTEmote[]> {
        let url_ = this.baseUrl + "/api/SevenTv/emotes?";
        if (broadcasterId === null)
            throw new Error("The parameter 'broadcasterId' cannot be null.");
        else if (broadcasterId !== undefined)
            url_ += "broadcasterId=" + encodeURIComponent("" + broadcasterId) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEmotes(_response);
        });
    }

    protected processEmotes(response: AxiosResponse): Promise<DTEmote[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DTEmote.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DTEmote[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DTEmote[]>(null as any);
    }
}

//-----/ClientClass----

export * as SevenTvQuery from './axios-client/SevenTvQuery';



//-----ClientClass--TwitchClient---
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming


export class TwitchClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param cursor (optional) 
     * @return Success
     */
    vtubers(cursor: string | undefined, cancelToken?: CancelToken | undefined): Promise<DTStreamData> {
        let url_ = this.baseUrl + "/api/Twitch/vtubers?";
        if (cursor === null)
            throw new Error("The parameter 'cursor' cannot be null.");
        else if (cursor !== undefined)
            url_ += "cursor=" + encodeURIComponent("" + cursor) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processVtubers(_response);
        });
    }

    protected processVtubers(response: AxiosResponse): Promise<DTStreamData> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DTStreamData.fromJS(resultData200);
            return Promise.resolve<DTStreamData>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DTStreamData>(null as any);
    }

    /**
     * @param broadcasterId (optional) 
     * @return Success
     */
    emotes(broadcasterId: number | undefined, cancelToken?: CancelToken | undefined): Promise<DTStreamerEmotes> {
        let url_ = this.baseUrl + "/api/Twitch/emotes?";
        if (broadcasterId === null)
            throw new Error("The parameter 'broadcasterId' cannot be null.");
        else if (broadcasterId !== undefined)
            url_ += "broadcasterId=" + encodeURIComponent("" + broadcasterId) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processEmotes(_response);
        });
    }

    protected processEmotes(response: AxiosResponse): Promise<DTStreamerEmotes> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = DTStreamerEmotes.fromJS(resultData200);
            return Promise.resolve<DTStreamerEmotes>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DTStreamerEmotes>(null as any);
    }

    /**
     * @param broadcasterId (optional) 
     * @return Success
     */
    clips(broadcasterId: number | undefined, cancelToken?: CancelToken | undefined): Promise<DTTwitchClip[]> {
        let url_ = this.baseUrl + "/api/Twitch/clips?";
        if (broadcasterId === null)
            throw new Error("The parameter 'broadcasterId' cannot be null.");
        else if (broadcasterId !== undefined)
            url_ += "broadcasterId=" + encodeURIComponent("" + broadcasterId) + "&";
          url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processClips(_response);
        });
    }

    protected processClips(response: AxiosResponse): Promise<DTTwitchClip[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DTTwitchClip.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DTTwitchClip[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DTTwitchClip[]>(null as any);
    }
}

//-----/ClientClass----

export * as TwitchQuery from './axios-client/TwitchQuery';



//-----Types.File-----
export class DTEmote implements IDTEmote {
    id?: string | undefined;
    name?: string | undefined;
    url?: string | undefined;

    constructor(data?: IDTEmote) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): DTEmote {
        data = typeof data === 'object' ? data : {};
        let result = new DTEmote();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["url"] = this.url;
        return data;
    }
}

export interface IDTEmote {
    id?: string | undefined;
    name?: string | undefined;
    url?: string | undefined;
}

export class DTStreamData implements IDTStreamData {
    vTubers?: DTVTuber[] | undefined;
    cursor?: string | undefined;

    constructor(data?: IDTStreamData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["vTubers"])) {
                this.vTubers = [] as any;
                for (let item of _data["vTubers"])
                    this.vTubers!.push(DTVTuber.fromJS(item));
            }
            this.cursor = _data["cursor"];
        }
    }

    static fromJS(data: any): DTStreamData {
        data = typeof data === 'object' ? data : {};
        let result = new DTStreamData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.vTubers)) {
            data["vTubers"] = [];
            for (let item of this.vTubers)
                data["vTubers"].push(item.toJSON());
        }
        data["cursor"] = this.cursor;
        return data;
    }
}

export interface IDTStreamData {
    vTubers?: DTVTuber[] | undefined;
    cursor?: string | undefined;
}

export class DTStreamerEmotes implements IDTStreamerEmotes {
    followerEmotes?: DTEmote[] | undefined;
    subscriptionEmotes?: DTSubscriptionEmotes;
    bitsEmotes?: DTEmote[] | undefined;

    constructor(data?: IDTStreamerEmotes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["followerEmotes"])) {
                this.followerEmotes = [] as any;
                for (let item of _data["followerEmotes"])
                    this.followerEmotes!.push(DTEmote.fromJS(item));
            }
            this.subscriptionEmotes = _data["subscriptionEmotes"] ? DTSubscriptionEmotes.fromJS(_data["subscriptionEmotes"]) : <any>undefined;
            if (Array.isArray(_data["bitsEmotes"])) {
                this.bitsEmotes = [] as any;
                for (let item of _data["bitsEmotes"])
                    this.bitsEmotes!.push(DTEmote.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DTStreamerEmotes {
        data = typeof data === 'object' ? data : {};
        let result = new DTStreamerEmotes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.followerEmotes)) {
            data["followerEmotes"] = [];
            for (let item of this.followerEmotes)
                data["followerEmotes"].push(item.toJSON());
        }
        data["subscriptionEmotes"] = this.subscriptionEmotes ? this.subscriptionEmotes.toJSON() : <any>undefined;
        if (Array.isArray(this.bitsEmotes)) {
            data["bitsEmotes"] = [];
            for (let item of this.bitsEmotes)
                data["bitsEmotes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDTStreamerEmotes {
    followerEmotes?: DTEmote[] | undefined;
    subscriptionEmotes?: DTSubscriptionEmotes;
    bitsEmotes?: DTEmote[] | undefined;
}

export class DTSubscriptionEmotes implements IDTSubscriptionEmotes {
    tier1Emotes?: DTEmote[] | undefined;
    tier2Emotes?: DTEmote[] | undefined;
    tier3Emotes?: DTEmote[] | undefined;

    constructor(data?: IDTSubscriptionEmotes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["tier1Emotes"])) {
                this.tier1Emotes = [] as any;
                for (let item of _data["tier1Emotes"])
                    this.tier1Emotes!.push(DTEmote.fromJS(item));
            }
            if (Array.isArray(_data["tier2Emotes"])) {
                this.tier2Emotes = [] as any;
                for (let item of _data["tier2Emotes"])
                    this.tier2Emotes!.push(DTEmote.fromJS(item));
            }
            if (Array.isArray(_data["tier3Emotes"])) {
                this.tier3Emotes = [] as any;
                for (let item of _data["tier3Emotes"])
                    this.tier3Emotes!.push(DTEmote.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DTSubscriptionEmotes {
        data = typeof data === 'object' ? data : {};
        let result = new DTSubscriptionEmotes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.tier1Emotes)) {
            data["tier1Emotes"] = [];
            for (let item of this.tier1Emotes)
                data["tier1Emotes"].push(item.toJSON());
        }
        if (Array.isArray(this.tier2Emotes)) {
            data["tier2Emotes"] = [];
            for (let item of this.tier2Emotes)
                data["tier2Emotes"].push(item.toJSON());
        }
        if (Array.isArray(this.tier3Emotes)) {
            data["tier3Emotes"] = [];
            for (let item of this.tier3Emotes)
                data["tier3Emotes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDTSubscriptionEmotes {
    tier1Emotes?: DTEmote[] | undefined;
    tier2Emotes?: DTEmote[] | undefined;
    tier3Emotes?: DTEmote[] | undefined;
}

export class DTTwitchClip implements IDTTwitchClip {
    id?: string | undefined;
    embedUrl?: string | undefined;
    title?: string | undefined;
    creatorName?: string | undefined;
    viewCount?: number;

    constructor(data?: IDTTwitchClip) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.embedUrl = _data["embedUrl"];
            this.title = _data["title"];
            this.creatorName = _data["creatorName"];
            this.viewCount = _data["viewCount"];
        }
    }

    static fromJS(data: any): DTTwitchClip {
        data = typeof data === 'object' ? data : {};
        let result = new DTTwitchClip();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["embedUrl"] = this.embedUrl;
        data["title"] = this.title;
        data["creatorName"] = this.creatorName;
        data["viewCount"] = this.viewCount;
        return data;
    }
}

export interface IDTTwitchClip {
    id?: string | undefined;
    embedUrl?: string | undefined;
    title?: string | undefined;
    creatorName?: string | undefined;
    viewCount?: number;
}

export class DTVTuber implements IDTVTuber {
    twitchId?: string | undefined;
    twitchName?: string | undefined;
    twitchUsername?: string | undefined;
    streamTitle?: string | undefined;
    currentGameName?: string | undefined;
    currentViewerCount?: number;
    currentThumbnailUrl?: string | undefined;
    language?: string | undefined;
    profilePictureUrl?: string | undefined;

    constructor(data?: IDTVTuber) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.twitchId = _data["twitchId"];
            this.twitchName = _data["twitchName"];
            this.twitchUsername = _data["twitchUsername"];
            this.streamTitle = _data["streamTitle"];
            this.currentGameName = _data["currentGameName"];
            this.currentViewerCount = _data["currentViewerCount"];
            this.currentThumbnailUrl = _data["currentThumbnailUrl"];
            this.language = _data["language"];
            this.profilePictureUrl = _data["profilePictureUrl"];
        }
    }

    static fromJS(data: any): DTVTuber {
        data = typeof data === 'object' ? data : {};
        let result = new DTVTuber();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["twitchId"] = this.twitchId;
        data["twitchName"] = this.twitchName;
        data["twitchUsername"] = this.twitchUsername;
        data["streamTitle"] = this.streamTitle;
        data["currentGameName"] = this.currentGameName;
        data["currentViewerCount"] = this.currentViewerCount;
        data["currentThumbnailUrl"] = this.currentThumbnailUrl;
        data["language"] = this.language;
        data["profilePictureUrl"] = this.profilePictureUrl;
        return data;
    }
}

export interface IDTVTuber {
    twitchId?: string | undefined;
    twitchName?: string | undefined;
    twitchUsername?: string | undefined;
    streamTitle?: string | undefined;
    currentGameName?: string | undefined;
    currentViewerCount?: number;
    currentThumbnailUrl?: string | undefined;
    language?: string | undefined;
    profilePictureUrl?: string | undefined;
}
//-----/CustomTypes.File-----

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}

//-----/Types.File-----

import { addResultTypeFactory } from './axios-client/helpers';
export { setBaseUrl, getBaseUrl } from './axios-client/helpers';
export { setAxiosFactory, getAxios } from './axios-client/helpers';


//-----PersistorHydrator.File-----
import type { PersistedClient } from '@tanstack/react-query-persist-client';
import type { DehydratedState, QueryKey } from '@tanstack/react-query'
import { getResultTypeFactory } from './axios-client/helpers';

/*
 * If you have Dates in QueryKeys (i.e. in request parameters), you need to deserialize them to Dates correctly
 * (otherwise they are deserialized as strings by default, and your queries are broken).
 */
export function deserializeDate(str: unknown) {
  if (!str || typeof str !== 'string') return str;
  if (!/^\d\d\d\d\-\d\d\-\d\d/.test(str)) return str;
  
  const date = new Date(str);
  const isDate = date instanceof Date && !isNaN(date as any);
  
  return isDate ? date : str;
}

export function deserializeDatesInQueryKeys(queryKey: QueryKey) {
  return queryKey
    // We need to replace `null` with `undefined` in query key, because
    // `undefined` is serialized as `null`.
    // And most probably if we have `null` in QueryKey it actually means `undefined`.
    // We can't keep nulls, because they have a different meaning, and e.g. boolean parameters are not allowed to be null.
    .map(x => (x === null ? undefined : x))
    .map(x => deserializeDate(x));
}

export function deserializeClassesInQueryData(queryKey: QueryKey, data: any) {
  if (!data) {
    return data;
  } else if (typeof data !== 'object') {
    return data;
  } else if ('pages' in data && 'pageParams' in data && Array.isArray(data.pages) && Array.isArray(data.pageParams)) {
    // infinite query
    data.pages = data.pages.map((page:any) => deserializeClassesInQueryData(queryKey, page));
  } else if (Array.isArray(data)) {
    return data.map(elem => constructDtoClass(queryKey, elem));
  } else {
    return constructDtoClass(queryKey, data);
  }
}

/*
 * Pass this function as `deserialize` option to createSyncStoragePersister/createAsyncStoragePersister
 * to correctly deserialize your DTOs (including Dates)
 */
export function persisterDeserialize(cache: string): PersistedClient {
  const client: PersistedClient = JSON.parse(cache);
  client.clientState.queries.forEach((query) => {
    query.state.data = deserializeClassesInQueryData(query.queryKey, query.state.data);
    query.queryKey = deserializeDatesInQueryKeys(query.queryKey);
  });

  return client;
}

export function constructDtoClass(queryKey: QueryKey, data: any): unknown {
  const resultTypeKey = getResultTypeClassKey(queryKey);
  const constructorFunction = getResultTypeFactory(resultTypeKey);

  if (!data || !constructorFunction)
    return data;

  return constructorFunction(data);
}

export function getResultTypeClassKey(queryKey: QueryKey): string {
  if (!Array.isArray(queryKey)) {
    return queryKey as unknown as string;
  }
  if (queryKey.length >= 2) {
    // We concatenate first and second elements, because they uniquely identify the query.
    // All other QueryKey elements are query parameters
    return `${queryKey[0]}___${queryKey[1]}`;
  }

  // We actually should never reach this point :)
  return queryKey.join('___');
}

export function initPersister() {
  
  addResultTypeFactory('SevenTvClient___emotes', (data: any) => { const result = new DTEmote(); result.init(data); return result; });


  addResultTypeFactory('TwitchClient___vtubers', (data: any) => { const result = new DTStreamData(); result.init(data); return result; });
  addResultTypeFactory('TwitchClient___emotes', (data: any) => { const result = new DTStreamerEmotes(); result.init(data); return result; });
  addResultTypeFactory('TwitchClient___clips', (data: any) => { const result = new DTTwitchClip(); result.init(data); return result; });


}
//-----/PersistorHydrator.File----